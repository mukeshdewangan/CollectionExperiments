package InstantPattern;

import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.SignStyle;
import java.time.temporal.ChronoField;

import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
import static java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;
import static java.time.temporal.ChronoField.*;
import static java.time.temporal.ChronoField.OFFSET_SECONDS;

public class FivetranDateTimeFormatters {

    public static final DateTimeFormatter CUSTOM_FORMATTER =
            new DateTimeFormatterBuilder()
                    .appendValue(YEAR_OF_ERA, 4, 4, SignStyle.NEVER)
                    .appendLiteral('-')
                    .appendValue(MONTH_OF_YEAR, 1, 2, SignStyle.NEVER)
                    .appendLiteral('-')
                    .appendValue(DAY_OF_MONTH, 1, 2, SignStyle.NEVER)
                    .optionalStart()
                    .appendLiteral('T')
                    .optionalEnd()
                    .optionalStart()
                    .appendLiteral(' ')
                    .optionalEnd()
                    .appendValue(HOUR_OF_DAY, 1, 2, SignStyle.NEVER)
                    .appendLiteral(':')
                    .appendValue(MINUTE_OF_HOUR, 1, 2, SignStyle.NEVER)
                    .appendLiteral(':')
                    .appendValue(SECOND_OF_MINUTE, 1, 2, SignStyle.NEVER)
                    .optionalStart()
                    .appendFraction(NANO_OF_SECOND, 0, 9, true)
                    .optionalEnd()
                    .optionalStart()
                    .appendLiteral(' ')
                    .appendOffset("+HH:MM", "Z")
                    .optionalEnd()
                    .toFormatter();

    public static final DateTimeFormatter DEFAULT_INSTANT_FORMATTER =
            new DateTimeFormatterBuilder()
                    .appendOptional(DateTimeFormatter.ISO_INSTANT)
                    .appendOptional(DateTimeFormatter.ISO_ZONED_DATE_TIME)
                    .appendOptional(DateTimeFormatter.ISO_OFFSET_DATE_TIME)
                    .appendOptional(DateTimeFormatter.ISO_LOCAL_DATE_TIME)
                    .appendOptional(CUSTOM_FORMATTER)
                    .appendOptional(DateTimeFormatter.ISO_DATE)
                    .toFormatter();

    public static final DateTimeFormatter NEW_DEFAULT_INSTANT_FORMATTER =
            new DateTimeFormatterBuilder()
                    .appendValue(YEAR, 4, 10, SignStyle.EXCEEDS_PAD)
                    .appendLiteral('-')
                    .appendValue(MONTH_OF_YEAR, 1, 2, SignStyle.NEVER)
                    .appendLiteral('-')
                    .appendValue(DAY_OF_MONTH, 1, 2, SignStyle.NEVER)
                    .optionalStart()
                    .appendLiteral(' ')
                    .appendValue(HOUR_OF_DAY, 1, 2, SignStyle.NEVER)
                    .appendLiteral(':')
                    .appendValue(MINUTE_OF_HOUR, 1, 2, SignStyle.NEVER)
                    .appendLiteral(':')
                    .appendValue(SECOND_OF_MINUTE, 1, 2, SignStyle.NEVER)
                    .optionalStart()
                    .appendLiteral('.')
                    .appendValue(NANO_OF_SECOND, 7, 9, SignStyle.NEVER)
                    .optionalEnd()
                    .optionalStart()
                    .appendLiteral('.')
                    .appendValue(MICRO_OF_SECOND, 4, 6, SignStyle.NEVER)
                    .optionalEnd()
                    .optionalStart()
                    .appendLiteral('.')
                    .appendValue(MILLI_OF_SECOND, 1, 3, SignStyle.NEVER)
                    .optionalEnd()
                    .optionalStart()
                    .appendValue(OFFSET_SECONDS)
                    .optionalEnd()
                    .optionalEnd()
                    .optionalStart()
                    .appendLiteral('T')
                    .optionalStart()
                    .append(ISO_LOCAL_TIME)
                    .appendOffsetId()
                    .optionalStart()
                    .appendLiteral('[')
                    .parseCaseSensitive()
                    .appendZoneRegionId()
                    .appendLiteral(']')
                    .optionalEnd()
                    .optionalEnd()
                    .optionalStart()
                    .appendValue(HOUR_OF_DAY, 1, 2, SignStyle.NEVER)
                    .appendLiteral(':')
                    .appendValue(MINUTE_OF_HOUR, 1, 2, SignStyle.NEVER)
                    .appendLiteral(':')
                    .appendValue(SECOND_OF_MINUTE, 1, 2, SignStyle.NEVER)
                    .optionalStart()
                    .appendLiteral('.')
                    .appendValue(NANO_OF_SECOND, 7, 9, SignStyle.NEVER)
                    .optionalEnd()
                    .optionalStart()
                    .appendLiteral('.')
                    .appendValue(MICRO_OF_SECOND, 4, 6, SignStyle.NEVER)
                    .optionalEnd()
                    .optionalStart()
                    .appendLiteral('.')
                    .appendValue(MILLI_OF_SECOND, 1, 3, SignStyle.NEVER)
                    .optionalEnd()
                    .optionalStart()
                    .appendValue(OFFSET_SECONDS)
                    .optionalEnd()
                    .optionalEnd()
                    .parseStrict()
                    .toFormatter();


    static final DateTimeFormatter E_COMM_INSTANT_TIMESTAMP =
            new DateTimeFormatterBuilder()
                    .appendValue(YEAR_OF_ERA, 4, 4, SignStyle.NEVER)
                    .appendLiteral('-')
                    .appendValue(MONTH_OF_YEAR, 1, 2, SignStyle.NEVER)
                    .appendLiteral('-')
                    .appendValue(DAY_OF_MONTH, 1, 2, SignStyle.NEVER)
                    .optionalStart()
                    .optionalStart()
                    .appendLiteral('T')
                    .optionalEnd()
                    .optionalStart()
                    .appendLiteral(' ')
                    .optionalEnd()
                    .appendValue(HOUR_OF_DAY, 1, 2, SignStyle.NEVER)
                    .appendLiteral(':')
                    .appendValue(MINUTE_OF_HOUR, 1, 2, SignStyle.NEVER)
                    .appendLiteral(':')
                    .appendValue(SECOND_OF_MINUTE, 1, 2, SignStyle.NEVER)
                    .optionalStart()
                    .appendFraction(NANO_OF_SECOND, 0, 9, true)
                    .optionalEnd()
                    .optionalStart()
                    .appendLiteral(" ")
                    .optionalEnd()
                    .optionalStart()
                    .appendOffset("+HH:MM", "Z")
                    .optionalEnd()
                    .optionalStart()
                    .appendZoneOrOffsetId()
                    .optionalEnd()
                    .optionalEnd()
                    .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)
                    .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
                    .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)
                    .parseDefaulting(MILLI_OF_SECOND, 0)
                    .toFormatter();
}
