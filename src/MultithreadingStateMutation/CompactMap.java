package MultithreadingStateMutation;

import java.util.*;

public class CompactMap<K, V> extends LinkedHashMap<K, V> {
    private final int maxCapacity;

    public CompactMap(int maxCapacity) {
        this.maxCapacity = maxCapacity;
    }

    public static Map<String, Integer> compaction(Map<String, Integer> unsortedMap) {
        List<Map.Entry<String, Integer>> list = new ArrayList<>(unsortedMap.entrySet());
        // Custom comparator to sort by values in descending order
        //Comparator<Map.Entry<String, Integer>> valueComparator = Map.Entry.comparingByValue();
        Comparator<Map.Entry<String, Integer>> valueComparator = (entry1, entry2) -> entry2.getValue().compareTo(entry1.getValue());
        // Sort the list based on the custom comparator
        list.sort(valueComparator);

        List<Map.Entry<String, Integer>> subList = list.subList(0,500);
        unsortedMap.clear();
        for (Map.Entry<String, Integer> entry : subList) {
            unsortedMap.put(entry.getKey(), entry.getValue());
        }
        return unsortedMap;
    }

    public static void main(String[] args) {
        Set<String> fromColumnMetadata = new HashSet<>(Arrays.asList("uiqty","shipto_prefix","isretainagerelease","shipto_phone_2","shipto_pager","qty_remaining","quantity","discount_memo","exchrate","exchratetype","employeeid","qty_converted","total_amount_converted","totalcompletedtodate","percentcompletedtodate","previousretainagebalance","retainagetobill","billabledocentrykey","btoshiptokey","warehouse_name","warehouse_location_no","shipto_mailaddress_zip","trx_value","btoshiptocontactname","source_docid","source_dockey","source_doclinekey","memo","billingtemplate","taskid","taskkey","taskname","taxableamount","completedthisperiod","contractlinevalue","billingtemplatekey","total","total_amount_remaining","balanceremaining","shipto_cellphone","vendorname","vendorid","shipto_email_2","shipto_fax","vendordimkey","shipto_initial","retailprice","uivalue","shipto_mailaddress_address_2","billed","employeename","trx_taxabsval","taxabsval","percentval","employeedimkey","revrecenddate","uiprice","item_numdec_sale","item_numdec_pur","overridetax","extended_description","price","linetotal","trx_price","trx_linetotal","item_taxgroup_recordno","item_numdec_std","revrectemplatekey","revrecstartdate","revrectemplate","shipto_mailaddress_address_1","shipto_url_2","shipto_firstname","shipto_lastname","shipto_url_1","shipto_email_1","deferrevenue","shipto_phone_1","issummarized","shipto_visible","billed_timesheetentry_entrydate","shipto_companyname","shipto_printas","sc_revrectemplatekey","sc_revrectemplate","sc_revrecstartdate","pricecalcmemo","prorateprice","quantityallocated","quantityallocatedwhenopen","quantityreserved","quantityreservedwhenopen","recordno","recurcontractid","recurdocentrykey","recurdocid","recurdocname","relateddockey","relateddoclinekey","relateddoclineno","renewalmacro","renewalmacrokey","retainagebalance","retainagepercentage","addedbychange","revisedqty","revisedunitprice","revisedunitqty","revisedunitvalue","revisedvalue","sc_createrecursched","sc_existingsched","sc_extendlineperiod","scheduleid","schedulename","sc_installpricing","sc_revrecenddate","sc_startdate","shipby","shippeddate","shipto_contactname","shiptokey","shipto_mailaddress_city","shipto_mailaddress_country","shipto_mailaddress_countrycode","shipto_mailaddress_state","state","status","storedmaterials","taxvaloverride","termperiod","timenotes","timetypekey","timetypename","trx_amountretained","trx_revisedprice","trx_revisedvalue","unit","whencreated","whenmodified","revisedprice","adjdocentrykey","adjdochdrkey","allocreserveisenabled","amountretained","auwhencreated","basecurr","billable","billablecontractschentrykey","billablecontractusagebillingid","billableglentrykey","billableprentrykey","billabletimeentrykey","bundlenumber","cancelafterdate","classdimkey","classid","classname","conversiontype","cost","cost_method","createdby","currency","customerdimkey","customerid","customername","datepickticketprinted","departmentid","departmentname","deptkey","discount","discountpercent","dochdrid","dochdrno","docparid","donotshipafterdate","donotshipbeforedate","draftchangebaseprice","draftchangeprice","draftchangeqty","draftchangeunitqty","eeaccountlabel","eeaccountlabelkey","exchratedate","geninvoicelinekey","itemaliasid","item_buytoorder","item_computeforshortterm","itemdesc","item_dropship","itemglgroup","itemid","item_itemtype","itemname","item_renewalmacrokey","item_renewalmacro_macroid","item_revposting","item_revprinting","item_taxable","itemterm","item_uomgrpkey","linelevelsimpletaxtype","line_no","locationid","locationkey","locationname","modifiedby","multiplier","needbydate","pcblbillingtype","pcbldescription","pcblexternalrefno","postedchangeextbaseprice","postedchangeextprice","postedqtychanges","price_converted","priorapplicationamt","projectcontractid","projectcontractkey","projectcontractlineid","projectcontractlinekey","projectcontractlinename","projectcontractname","projectdimkey","projectid","projectkey","projectname"));
        Set<String> fromCustomer = new HashSet<>(Arrays.asList("recordno","dochdrno","dochdrid","docparid","sale_pur_trans","bundlenumber","line_no","itemdimkey","itemid","itemname","itemdesc","unit","warehouse.location_no","warehouse.name","warehousedimkey","memo","pricecalcmemo","quantity","qty_converted","retailprice","price","total","whencreated","whenmodified","auwhencreated","createdby","modifiedby","item.taxable","item.taxgroup.recordno","item.renewalmacro.macroid","extended_description","itemglgroup","itemglgroupkey","itemglgroupname","state","status","cost","cost_method","uiqty","discountpercent","multiplier","uiprice","uivalue","locationid","locationname","departmentid","departmentname","deptkey","locationkey","timetypekey","timetypename","timenotes","eeaccountlabelkey","eeaccountlabel","source_dockey","source_doclinekey","adjdochdrkey","adjdocentrykey","revrectemplate","revrectemplatekey","revrecstartdate","itemterm","termperiod","revrecenddate","prorateprice","deferrevenue","sc_revrectemplate","sc_revrectemplatekey","sc_revrecstartdate","sc_revrecenddate","sc_startdate","item.itemtype","item.numdec_sale","item.numdec_std","item.numdec_pur","item.revposting","item.computeforshortterm","item.renewalmacrokey","item.uomgrpkey","item.dropship","item.buytoorder","discount_memo","item.revprinting","currency","basecurr","exchratedate","exchratetype","exchrate","trx_price","trx_value","schedulename","scheduleid","recurdocname","recurdocid","recurdocentrykey","renewalmacro","renewalmacrokey","overridetax","sc_createrecursched","sc_existingsched","sc_extendlineperiod","sc_installpricing","recurcontractid","source_docid","sourcedocparid","billable","billed","billabletimeentrykey","billableglentrykey","billableprentrykey","billabledocentrykey","billablecontractschentrykey","billablecontractusagebillingid","form1099","percentval","taxabsval","taxableamount","linetotal","discount","trx_taxabsval","trx_linetotal","taxvaloverride","form1099type","form1099box","price_converted","conversiontype","workkey","quantityreserved","quantityallocated","quantityreservedwhenopen","quantityallocatedwhenopen","allocreserveisenabled","projectkey","projectname","taskkey","taskid","taskname","billingtemplatekey","billingtemplate","billingschedulekey","billingscheduleentry.percentcompleted","billingscheduleentry.percentbilled","billingscheduleentry.billedqty","billingscheduleentry.estqty","billingscheduleentry.truncpercentcompleted","billingscheduleentry.billingtemplateentrykey","billingscheduleentry.billingschedulekey","geninvoicelinekey","linelevelsimpletaxtype","needbydate","shipby","donotshipbeforedate","donotshipafterdate","datepickticketprinted","cancelafterdate","shippeddate","shiptokey","shipto.contactname","shipto.prefix","shipto.firstname","shipto.initial","shipto.lastname","shipto.companyname","shipto.printas","shipto.phone1","shipto.phone2","shipto.cellphone","shipto.pager","shipto.fax","shipto.email1","shipto.email2","shipto.url1","shipto.url2","shipto.visible","shipto.mailaddress.address1","shipto.mailaddress.address2","shipto.mailaddress.city","shipto.mailaddress.state","shipto.mailaddress.zip","shipto.mailaddress.country","shipto.mailaddress.countrycode","btoshiptokey","btoshiptocontactname","retainagepercentage","amountretained","trx_amountretained","relateddockey","relateddoclinekey","revisedunitqty","revisedqty","draftchangeunitqty","draftchangeqty","revisedunitvalue","revisedvalue","trx_revisedvalue","revisedprice","revisedunitprice","trx_revisedprice","relateddocno","relateddoclineno","relateddoclinenum","draftchangeprice","postedqtychanges","postedchangeextprice","postedchangeextbaseprice","relateddocuiqty","relateddoctrx_value","relateddocuivalue","addedbychange","projectcontractid","projectcontractname","projectcontractkey","projectcontractlineid","projectcontractlinename","projectcontractlinekey","pcblexternalrefno","pcbldescription","pcblbillingtype","contractlinevalue","priorapplicationamt","completedthisperiod","storedmaterials","totalcompletedtodate","percentcompletedtodate","balanceremaining","draftchangebaseprice","previousretainagebalance","isretainagerelease","retainagetobill","retainagebalance","itemaliasid","itemaliaskey","total_amount_converted","total_amount_remaining","qty_remaining","projectdimkey","projectid","customerdimkey","customerid","customername","vendordimkey","vendorid","vendorname","employeedimkey","employeeid","employeename","classdimkey","classid","classname","billed_timesheetentry.entrydate"));
        Set<String> fromLookup = new HashSet<>(Arrays.asList("recordno","dochdrno","dochdrid","docparid","bundlenumber","line_no","itemid","itemname","itemdesc","unit","warehouse.location_no","warehouse.name","memo","pricecalcmemo","quantity","qty_converted","retailprice","price","total","whencreated","whenmodified","auwhencreated","createdby","modifiedby","item.taxable","item.taxgroup.recordno","item.renewalmacro.macroid","extended_description","itemglgroup","state","status","cost","cost_method","uiqty","discountpercent","multiplier","uiprice","uivalue","locationid","locationname","departmentid","departmentname","deptkey","locationkey","timetypekey","timetypename","timenotes","eeaccountlabelkey","eeaccountlabel","source_dockey","source_doclinekey","adjdochdrkey","adjdocentrykey","revrectemplate","revrectemplatekey","revrecstartdate","itemterm","termperiod","revrecenddate","prorateprice","deferrevenue","sc_revrectemplate","sc_revrectemplatekey","sc_revrecstartdate","sc_revrecenddate","sc_startdate","item.itemtype","item.numdec_sale","item.numdec_std","item.numdec_pur","item.revposting","item.computeforshortterm","item.renewalmacrokey","item.uomgrpkey","item.dropship","item.buytoorder","discount_memo","item.revprinting","currency","basecurr","exchratedate","exchratetype","exchrate","trx_price","trx_value","schedulename","scheduleid","recurdocname","recurdocid","recurdocentrykey","renewalmacro","renewalmacrokey","overridetax","sc_createrecursched","sc_existingsched","sc_extendlineperiod","sc_installpricing","recurcontractid","source_docid","billable","billed","billabletimeentrykey","billableglentrykey","billableprentrykey","billabledocentrykey","billablecontractschentrykey","billablecontractusagebillingid","percentval","taxabsval","taxableamount","linetotal","discount","trx_taxabsval","trx_linetotal","taxvaloverride","price_converted","conversiontype","quantityreserved","quantityallocated","quantityreservedwhenopen","quantityallocatedwhenopen","allocreserveisenabled","projectkey","projectname","taskkey","taskid","taskname","billingtemplatekey","billingtemplate","geninvoicelinekey","linelevelsimpletaxtype","needbydate","shipby","donotshipbeforedate","donotshipafterdate","datepickticketprinted","cancelafterdate","shippeddate","shiptokey","shipto.contactname","shipto.prefix","shipto.firstname","shipto.initial","shipto.lastname","shipto.companyname","shipto.printas","shipto.phone1","shipto.phone2","shipto.cellphone","shipto.pager","shipto.fax","shipto.email1","shipto.email2","shipto.url1","shipto.url2","shipto.visible","shipto.mailaddress.address1","shipto.mailaddress.address2","shipto.mailaddress.city","shipto.mailaddress.state","shipto.mailaddress.zip","shipto.mailaddress.country","shipto.mailaddress.countrycode","btoshiptokey","btoshiptocontactname","retainagepercentage","amountretained","trx_amountretained","relateddockey","relateddoclinekey","revisedunitqty","revisedqty","draftchangeunitqty","draftchangeqty","revisedunitvalue","revisedvalue","trx_revisedvalue","revisedprice","revisedunitprice","trx_revisedprice","relateddoclineno","draftchangeprice","postedqtychanges","postedchangeextprice","postedchangeextbaseprice","addedbychange","projectcontractid","projectcontractname","projectcontractkey","projectcontractlineid","projectcontractlinename","projectcontractlinekey","pcblexternalrefno","pcbldescription","pcblbillingtype","contractlinevalue","priorapplicationamt","completedthisperiod","storedmaterials","totalcompletedtodate","percentcompletedtodate","balanceremaining","draftchangebaseprice","previousretainagebalance","isretainagerelease","retainagetobill","retainagebalance","issummarized","itemaliasid","total_amount_converted","total_amount_remaining","qty_remaining","projectdimkey","projectid","customerdimkey","customerid","customername","vendordimkey","vendorid","vendorname","employeedimkey","employeeid","employeename","classdimkey","classid","classname","billed_timesheetentry.entrydate","record_url"));

        Set<String> common = new HashSet<>();
        Set<String> notInColumnMetadata = new HashSet<>();
        Set<String> notInLookup = new HashSet<>();
        for (String s: fromCustomer) {
            //if(fromColumnMetadata.contains(s)) {
                //System.out.println(s);
            //    common.add(s);
            //}
            if(fromLookup.contains(s)){
                common.add(s);
            }
            else {
                //System.out.println(s);
                //notInColumnMetadata.add(s);
                notInLookup.add(s);
            }
        }
        System.out.println("_____________________________________________");
        //notInColumnMetadata.forEach(System.out::println);
        notInLookup.forEach(System.out::println);
//        Map<String, Integer> compactMap = new CompactMap<>(500);
//        // Add entries to the map
//        for (int i = 0; i < 1002; i++) {
//            if(compactMap.size() >= 1000){
//                compactMap = compaction(compactMap);
//            }
//            compactMap.put("Key" + i, i*2);
//        }
//        // Print the top entries
//        for (Map.Entry<String, Integer> entry : compactMap.entrySet()) {
//            System.out.println(entry.getKey() + ": " + entry.getValue());
//        }
    }
}

